// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	models "pinset/internal/app/models"
	response "pinset/internal/app/models/response"
	session "pinset/internal/app/session"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetLastUserID mocks base method
func (m *MockUserRepository) GetLastUserID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUserID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUserID indicates an expected call of GetLastUserID
func (mr *MockUserRepositoryMockRecorder) GetLastUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUserID", reflect.TypeOf((*MockUserRepository)(nil).GetLastUserID))
}

// CreateUser mocks base method
func (m *MockUserRepository) CreateUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0)
}

// CheckUserByEmail mocks base method
func (m *MockUserRepository) CheckUserByEmail(arg0 *models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserByEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserByEmail indicates an expected call of CheckUserByEmail
func (mr *MockUserRepositoryMockRecorder) CheckUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckUserByEmail), arg0)
}

// GetUserInfo mocks base method
func (m *MockUserRepository) GetUserInfo(arg0 *models.User) (response.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(response.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockUserRepositoryMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserInfo), arg0)
}

// CheckUserCredentials mocks base method
func (m *MockUserRepository) CheckUserCredentials(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserCredentials", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserCredentials indicates an expected call of CheckUserCredentials
func (mr *MockUserRepositoryMockRecorder) CheckUserCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserCredentials", reflect.TypeOf((*MockUserRepository)(nil).CheckUserCredentials), arg0)
}

// UpdateUserInfo mocks base method
func (m *MockUserRepository) UpdateUserInfo(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo
func (mr *MockUserRepositoryMockRecorder) UpdateUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserInfo), arg0)
}

// UpdateUserPassword mocks base method
func (m *MockUserRepository) UpdateUserPassword(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockUserRepositoryMockRecorder) UpdateUserPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPassword), arg0)
}

// DeleteUserByID mocks base method
func (m *MockUserRepository) DeleteUserByID(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID
func (mr *MockUserRepositoryMockRecorder) DeleteUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByID), arg0)
}

// FollowUser mocks base method
func (m *MockUserRepository) FollowUser(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser
func (mr *MockUserRepositoryMockRecorder) FollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUserRepository)(nil).FollowUser), arg0, arg1)
}

// UnfollowUser mocks base method
func (m *MockUserRepository) UnfollowUser(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowUser indicates an expected call of UnfollowUser
func (mr *MockUserRepositoryMockRecorder) UnfollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockUserRepository)(nil).UnfollowUser), arg0, arg1)
}

// GetAllFollowings mocks base method
func (m *MockUserRepository) GetAllFollowings(arg0, arg1 uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFollowings", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFollowings indicates an expected call of GetAllFollowings
func (mr *MockUserRepositoryMockRecorder) GetAllFollowings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFollowings", reflect.TypeOf((*MockUserRepository)(nil).GetAllFollowings), arg0, arg1)
}

// GetAllSubscriptions mocks base method
func (m *MockUserRepository) GetAllSubscriptions(arg0, arg1 uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions
func (mr *MockUserRepositoryMockRecorder) GetAllSubscriptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockUserRepository)(nil).GetAllSubscriptions), arg0, arg1)
}

// GetFollowingsCount mocks base method
func (m *MockUserRepository) GetFollowingsCount(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingsCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingsCount indicates an expected call of GetFollowingsCount
func (mr *MockUserRepositoryMockRecorder) GetFollowingsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingsCount", reflect.TypeOf((*MockUserRepository)(nil).GetFollowingsCount), arg0)
}

// GetSubsriptionsCount mocks base method
func (m *MockUserRepository) GetSubsriptionsCount(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubsriptionsCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubsriptionsCount indicates an expected call of GetSubsriptionsCount
func (mr *MockUserRepositoryMockRecorder) GetSubsriptionsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubsriptionsCount", reflect.TypeOf((*MockUserRepository)(nil).GetSubsriptionsCount), arg0)
}

// UserHasActiveSession mocks base method
func (m *MockUserRepository) UserHasActiveSession(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasActiveSession", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserHasActiveSession indicates an expected call of UserHasActiveSession
func (mr *MockUserRepositoryMockRecorder) UserHasActiveSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasActiveSession", reflect.TypeOf((*MockUserRepository)(nil).UserHasActiveSession), arg0)
}

// Session mocks base method
func (m *MockUserRepository) Session() *session.SessionsManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(*session.SessionsManager)
	return ret0
}

// Session indicates an expected call of Session
func (mr *MockUserRepositoryMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockUserRepository)(nil).Session))
}

// MockMediaRepository is a mock of MediaRepository interface
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// CreatePin mocks base method
func (m *MockMediaRepository) CreatePin(pin *models.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePin", pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePin indicates an expected call of CreatePin
func (mr *MockMediaRepositoryMockRecorder) CreatePin(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePin", reflect.TypeOf((*MockMediaRepository)(nil).CreatePin), pin)
}

// GetAllPins mocks base method
func (m *MockMediaRepository) GetAllPins() ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPins")
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPins indicates an expected call of GetAllPins
func (mr *MockMediaRepositoryMockRecorder) GetAllPins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPins", reflect.TypeOf((*MockMediaRepository)(nil).GetAllPins))
}

// GetPinPreviewInfoByPinID mocks base method
func (m *MockMediaRepository) GetPinPreviewInfoByPinID(pinID uint64) (*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinPreviewInfoByPinID", pinID)
	ret0, _ := ret[0].(*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinPreviewInfoByPinID indicates an expected call of GetPinPreviewInfoByPinID
func (mr *MockMediaRepositoryMockRecorder) GetPinPreviewInfoByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinPreviewInfoByPinID", reflect.TypeOf((*MockMediaRepository)(nil).GetPinPreviewInfoByPinID), pinID)
}

// GetPinPageInfoByPinID mocks base method
func (m *MockMediaRepository) GetPinPageInfoByPinID(pinID uint64) (*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinPageInfoByPinID", pinID)
	ret0, _ := ret[0].(*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinPageInfoByPinID indicates an expected call of GetPinPageInfoByPinID
func (mr *MockMediaRepositoryMockRecorder) GetPinPageInfoByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinPageInfoByPinID", reflect.TypeOf((*MockMediaRepository)(nil).GetPinPageInfoByPinID), pinID)
}

// GetPinAuthorNameByUserID mocks base method
func (m *MockMediaRepository) GetPinAuthorNameByUserID(userID uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinAuthorNameByUserID", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinAuthorNameByUserID indicates an expected call of GetPinAuthorNameByUserID
func (mr *MockMediaRepositoryMockRecorder) GetPinAuthorNameByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinAuthorNameByUserID", reflect.TypeOf((*MockMediaRepository)(nil).GetPinAuthorNameByUserID), userID)
}

// UpdatePinInfoByPinID mocks base method
func (m *MockMediaRepository) UpdatePinInfoByPinID(pin *models.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePinInfoByPinID", pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePinInfoByPinID indicates an expected call of UpdatePinInfoByPinID
func (mr *MockMediaRepositoryMockRecorder) UpdatePinInfoByPinID(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePinInfoByPinID", reflect.TypeOf((*MockMediaRepository)(nil).UpdatePinInfoByPinID), pin)
}

// UpdatePinViewsByPinID mocks base method
func (m *MockMediaRepository) UpdatePinViewsByPinID(pinID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePinViewsByPinID", pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePinViewsByPinID indicates an expected call of UpdatePinViewsByPinID
func (mr *MockMediaRepositoryMockRecorder) UpdatePinViewsByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePinViewsByPinID", reflect.TypeOf((*MockMediaRepository)(nil).UpdatePinViewsByPinID), pinID)
}

// UpdatePinUpdateTimeByPinID mocks base method
func (m *MockMediaRepository) UpdatePinUpdateTimeByPinID() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePinUpdateTimeByPinID")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePinUpdateTimeByPinID indicates an expected call of UpdatePinUpdateTimeByPinID
func (mr *MockMediaRepositoryMockRecorder) UpdatePinUpdateTimeByPinID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePinUpdateTimeByPinID", reflect.TypeOf((*MockMediaRepository)(nil).UpdatePinUpdateTimeByPinID))
}

// DeletePinByPinID mocks base method
func (m *MockMediaRepository) DeletePinByPinID(pinID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePinByPinID", pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePinByPinID indicates an expected call of DeletePinByPinID
func (mr *MockMediaRepositoryMockRecorder) DeletePinByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePinByPinID", reflect.TypeOf((*MockMediaRepository)(nil).DeletePinByPinID), pinID)
}

// GetAllCommentariesByPinID mocks base method
func (m *MockMediaRepository) GetAllCommentariesByPinID(pinID uint64) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentariesByPinID", pinID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentariesByPinID indicates an expected call of GetAllCommentariesByPinID
func (mr *MockMediaRepositoryMockRecorder) GetAllCommentariesByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentariesByPinID", reflect.TypeOf((*MockMediaRepository)(nil).GetAllCommentariesByPinID), pinID)
}

// GetPinBookmarksNumberByPinID mocks base method
func (m *MockMediaRepository) GetPinBookmarksNumberByPinID(pinID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinBookmarksNumberByPinID", pinID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinBookmarksNumberByPinID indicates an expected call of GetPinBookmarksNumberByPinID
func (mr *MockMediaRepositoryMockRecorder) GetPinBookmarksNumberByPinID(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinBookmarksNumberByPinID", reflect.TypeOf((*MockMediaRepository)(nil).GetPinBookmarksNumberByPinID), pinID)
}

// GetBookmarkOnUserPin mocks base method
func (m *MockMediaRepository) GetBookmarkOnUserPin(ownerID, pinID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarkOnUserPin", ownerID, pinID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarkOnUserPin indicates an expected call of GetBookmarkOnUserPin
func (mr *MockMediaRepositoryMockRecorder) GetBookmarkOnUserPin(ownerID, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarkOnUserPin", reflect.TypeOf((*MockMediaRepository)(nil).GetBookmarkOnUserPin), ownerID, pinID)
}

// CreatePinBookmark mocks base method
func (m *MockMediaRepository) CreatePinBookmark(bookmark *models.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePinBookmark", bookmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePinBookmark indicates an expected call of CreatePinBookmark
func (mr *MockMediaRepositoryMockRecorder) CreatePinBookmark(bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePinBookmark", reflect.TypeOf((*MockMediaRepository)(nil).CreatePinBookmark), bookmark)
}

// DeletePinBookmarkByBookmarkID mocks base method
func (m *MockMediaRepository) DeletePinBookmarkByBookmarkID(bookmarkID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePinBookmarkByBookmarkID", bookmarkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePinBookmarkByBookmarkID indicates an expected call of DeletePinBookmarkByBookmarkID
func (mr *MockMediaRepositoryMockRecorder) DeletePinBookmarkByBookmarkID(bookmarkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePinBookmarkByBookmarkID", reflect.TypeOf((*MockMediaRepository)(nil).DeletePinBookmarkByBookmarkID), bookmarkID)
}

// GetAllBoardsByOwnerID mocks base method
func (m *MockMediaRepository) GetAllBoardsByOwnerID(ownerID uint64) ([]*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBoardsByOwnerID", ownerID)
	ret0, _ := ret[0].([]*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBoardsByOwnerID indicates an expected call of GetAllBoardsByOwnerID
func (mr *MockMediaRepositoryMockRecorder) GetAllBoardsByOwnerID(ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBoardsByOwnerID", reflect.TypeOf((*MockMediaRepository)(nil).GetAllBoardsByOwnerID), ownerID)
}

// GetBoardByBoardID mocks base method
func (m *MockMediaRepository) GetBoardByBoardID(boardID uint64) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardByBoardID", boardID)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardByBoardID indicates an expected call of GetBoardByBoardID
func (mr *MockMediaRepositoryMockRecorder) GetBoardByBoardID(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardByBoardID", reflect.TypeOf((*MockMediaRepository)(nil).GetBoardByBoardID), boardID)
}

// CreateBoard mocks base method
func (m *MockMediaRepository) CreateBoard(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockMediaRepositoryMockRecorder) CreateBoard(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockMediaRepository)(nil).CreateBoard), board)
}

// UpdateBoardByBoardID mocks base method
func (m *MockMediaRepository) UpdateBoardByBoardID(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoardByBoardID", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBoardByBoardID indicates an expected call of UpdateBoardByBoardID
func (mr *MockMediaRepositoryMockRecorder) UpdateBoardByBoardID(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoardByBoardID", reflect.TypeOf((*MockMediaRepository)(nil).UpdateBoardByBoardID), board)
}

// DeleteBoardByBoardID mocks base method
func (m *MockMediaRepository) DeleteBoardByBoardID(boardID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardByBoardID", boardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardByBoardID indicates an expected call of DeleteBoardByBoardID
func (mr *MockMediaRepositoryMockRecorder) DeleteBoardByBoardID(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardByBoardID", reflect.TypeOf((*MockMediaRepository)(nil).DeleteBoardByBoardID), boardID)
}

// GetBucketNameForContentType mocks base method
func (m *MockMediaRepository) GetBucketNameForContentType(fileType string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketNameForContentType", fileType)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketNameForContentType indicates an expected call of GetBucketNameForContentType
func (mr *MockMediaRepositoryMockRecorder) GetBucketNameForContentType(fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketNameForContentType", reflect.TypeOf((*MockMediaRepository)(nil).GetBucketNameForContentType), fileType)
}

// HasCorrectContentType mocks base method
func (m *MockMediaRepository) HasCorrectContentType(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCorrectContentType", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCorrectContentType indicates an expected call of HasCorrectContentType
func (mr *MockMediaRepositoryMockRecorder) HasCorrectContentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCorrectContentType", reflect.TypeOf((*MockMediaRepository)(nil).HasCorrectContentType), arg0)
}

// UploadMedia mocks base method
func (m *MockMediaRepository) UploadMedia(arg0, arg1 string, arg2 io.Reader, arg3 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMedia", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadMedia indicates an expected call of UploadMedia
func (mr *MockMediaRepositoryMockRecorder) UploadMedia(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMedia", reflect.TypeOf((*MockMediaRepository)(nil).UploadMedia), arg0, arg1, arg2, arg3)
}
